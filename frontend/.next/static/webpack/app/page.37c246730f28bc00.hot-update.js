"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   aiAPI: () => (/* binding */ aiAPI),\n/* harmony export */   authAPI: () => (/* binding */ authAPI),\n/* harmony export */   expertAPI: () => (/* binding */ expertAPI),\n/* harmony export */   statisticsAPI: () => (/* binding */ statisticsAPI)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\n// API endpoints\nconst API_URL = '/api';\n// Get the API URL from environment or use default\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080';\n// Axios instance\nconst apiClient = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: API_URL,\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    // Add timeout to prevent hanging requests\n    timeout: 15000\n});\n// Add Authorization header with JWT token if available\napiClient.interceptors.request.use((config)=>{\n    if (true) {\n        // Only add token if we're not on the login page\n        if (window.location.pathname !== '/login') {\n            const token = localStorage.getItem('token');\n            if (token) {\n                config.headers.Authorization = \"Bearer \".concat(token);\n            } else if (window.location.pathname !== '/') {\n                // If no token and not on login or homepage, redirect to login\n                window.location.href = '/login';\n                return Promise.reject(new Error('No authentication token found'));\n            }\n        }\n    }\n    return config;\n}, (error)=>Promise.reject(error));\n// Expert API functions\nconst expertAPI = {\n    // Get all experts with optional filters, pagination and sorting\n    getAllExperts: async function(filters) {\n        let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 10, offset = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, sortBy = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 'name', sortOrder = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 'asc';\n        const params = new URLSearchParams();\n        // Add pagination parameters\n        params.append('limit', String(limit));\n        params.append('offset', String(offset));\n        // Add sorting parameters\n        if (sortBy) {\n            params.append('sort_by', sortBy);\n            params.append('sort_order', sortOrder);\n        }\n        // Add filters\n        if (filters) {\n            Object.entries(filters).forEach((param)=>{\n                let [key, value] = param;\n                if (value !== undefined && value !== null && value !== '') {\n                    params.append(key, String(value));\n                }\n            });\n        }\n        const response = await apiClient.get(\"/experts?\".concat(params.toString()));\n        return {\n            experts: response.data,\n            pagination: {\n                limit,\n                offset,\n                total: parseInt(response.headers['x-total-count'] || '0')\n            }\n        };\n    },\n    // Get expert by ID\n    getExpertById: async (id)=>{\n        const response = await apiClient.get(\"/experts/\".concat(id));\n        return response.data;\n    },\n    // Create expert request\n    createExpertRequest: async (expertRequest)=>{\n        const response = await apiClient.post('/expert-requests', expertRequest);\n        return response.data;\n    },\n    // Get ISCED classification data\n    getISCEDLevels: async ()=>{\n        const response = await apiClient.get('/isced/levels');\n        return response.data;\n    },\n    getISCEDFields: async ()=>{\n        const response = await apiClient.get('/isced/fields');\n        return response.data;\n    },\n    // Engagement operations\n    getExpertEngagements: async (expertId)=>{\n        const response = await apiClient.get(\"/experts/\".concat(expertId, \"/engagements\"));\n        return response.data;\n    },\n    createEngagement: async (engagement)=>{\n        const response = await apiClient.post('/engagements', engagement);\n        return response.data;\n    },\n    updateEngagement: async (id, engagement)=>{\n        const response = await apiClient.put(\"/engagements/\".concat(id), engagement);\n        return response.data;\n    },\n    deleteEngagement: async (id)=>{\n        const response = await apiClient.delete(\"/engagements/\".concat(id));\n        return response.data;\n    }\n};\n// AI Panel Suggestion API\nconst aiAPI = {\n    suggestExpertPanel: async function(projectName, iscedFieldId) {\n        let numExperts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 3;\n        const response = await apiClient.post('/ai/suggest-panel', {\n            projectName,\n            iscedFieldId: iscedFieldId || undefined,\n            numExperts\n        });\n        return response.data;\n    }\n};\n// Statistics API\nconst statisticsAPI = {\n    // Get all statistics\n    getAllStatistics: async ()=>{\n        const response = await apiClient.get('/statistics');\n        return response.data;\n    },\n    // Get nationality statistics\n    getNationalityStats: async ()=>{\n        const response = await apiClient.get('/statistics/nationality');\n        return response.data;\n    },\n    // Get ISCED statistics\n    getISCEDStats: async ()=>{\n        const response = await apiClient.get('/statistics/isced');\n        return response.data;\n    },\n    // Get engagement statistics\n    getEngagementStats: async ()=>{\n        const response = await apiClient.get('/statistics/engagements');\n        return response.data;\n    },\n    // Get growth statistics\n    getGrowthStats: async function() {\n        let months = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 12;\n        const response = await apiClient.get(\"/statistics/growth?months=\".concat(months));\n        return response.data;\n    }\n};\n// Authentication API\nconst authAPI = {\n    login: async (email, password)=>{\n        try {\n            // Try direct URL if API proxy fails\n            const fallbackClient = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n                baseURL: API_BASE_URL,\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                timeout: 15000\n            });\n            // First try with the regular API client (using proxy)\n            try {\n                const response = await apiClient.post('/auth/login', {\n                    email,\n                    password\n                });\n                return response.data;\n            } catch (proxyError) {\n                // Fallback to direct URL if proxy fails\n                const directResponse = await fallbackClient.post('/api/auth/login', {\n                    email,\n                    password\n                });\n                return directResponse.data;\n            }\n        } catch (error) {\n            throw error;\n        }\n    },\n    logout: ()=>{\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        // Trigger storage event for cross-tab communication\n        window.dispatchEvent(new Event('storage'));\n    },\n    getUser: ()=>{\n        if (false) {}\n        try {\n            const user = localStorage.getItem('user');\n            return user ? JSON.parse(user) : null;\n        } catch (error) {\n            console.error('Error parsing user from localStorage:', error);\n            return null;\n        }\n    },\n    isAuthenticated: ()=>{\n        if (false) {}\n        return !!localStorage.getItem('token');\n    }\n};\n// Error handler middleware for Axios\napiClient.interceptors.response.use((response)=>response, (error)=>{\n    var _error_response;\n    // Log detailed error information for debugging\n    if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        console.error('API Error Response:', {\n            status: error.response.status,\n            headers: error.response.headers,\n            data: error.response.data\n        });\n    } else if (error.request) {\n        // The request was made but no response was received\n        console.error('API No Response:', error.request);\n    } else {\n        // Something happened in setting up the request that triggered an Error\n        console.error('API Request Error:', error.message);\n    }\n    // Handle authentication errors\n    if (((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) === 401 && \"object\" !== 'undefined') {\n        console.log('Authentication error detected, logging out user');\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        // Use a more controlled redirect that doesn't interfere with the current operation\n        setTimeout(()=>{\n            window.location.href = '/login';\n        }, 100);\n    }\n    return Promise.reject(error);\n});\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});