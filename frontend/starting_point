expert-db-frontend/
├── public/
│   ├── BQA - Horizontal Logo.svg
│   ├── BQA - Horizontal Logo with Descriptor.svg
│   ├── BQA - Vertical Logo - With descriptor.svg
│   ├── Icon Logo - Color.svg
│   └── index.html
├── src/
│   ├── assets/
│   ├── components/
│   │   ├── layout/
│   │   │   ├── Header.tsx
│   │   │   ├── Footer.tsx
│   │   │   └── Sidebar.tsx
│   │   ├── ui/
│   │   │   ├── Button.tsx
│   │   │   ├── Input.tsx
│   │   │   └── Table.tsx
│   │   ├── LoginForm.tsx
│   │   ├── ExpertTable.tsx
│   │   ├── ExpertFilters.tsx
│   │   ├── ExpertRequestForm.tsx
│   │   ├── UserTable.tsx
│   │   ├── ExpertRequestTable.tsx
│   │   └── StatsCharts.tsx
│   ├── contexts/
│   │   └── AuthContext.tsx
│   ├── hooks/
│   │   └── useAuth.ts
│   ├── pages/
│   │   ├── LoginPage.tsx
│   │   ├── SearchPage.tsx
│   │   ├── AdminPage.tsx
│   │   ├── StatsPage.tsx
│   │   └── ExpertRequestPage.tsx
│   ├── services/
│   │   └── api.ts
│   ├── types/
│   │   └── index.ts
│   ├── App.tsx
│   ├── index.tsx
│   ├── vite-env.d.ts
│   └── tailwind.config.js
├── package.json
├── tsconfig.json
└── vite.config.ts


Step 1: Project Setup
Task: Set up the Vite project and install dependencies.

Instructions: 
Initialize a Vite project with React and TypeScript: npm create vite@latest expert-db-frontend -- --template react-ts. (already done)

Install dependencies: npm install react-router-dom axios react-hook-form @shadcn/ui recharts.(already done)

Configure Tailwind CSS and Shadcn/UI per their docs (add Tailwind to tailwind.config.js, initialize Shadcn/UI).

Create the file structure above with empty files as placeholders.

Place the provided logos in public/.
Outcome: A basic project ready for development with minimal dependencies.
Step 2: Authentication and Session Management
Task: Implement login and protected routes.

Instructions: 
In contexts/AuthContext.tsx, create an AuthContext to manage JWT token and user role (e.g., admin or user). Include login (store token) and logout (clear token) functions. Use localStorage for persistence.

In hooks/useAuth.ts, create a useAuth hook to access the context.

In pages/LoginPage.tsx, build a login form with React Hook Form (fields: email, password). On submit, call /api/auth/login with Axios, store the token, and redirect to /search (users) or /admin (admins) based on role.

In App.tsx, set up React Router with routes:
/ → LoginPage (public)

/search → SearchPage (protected)

/admin → AdminPage (admin-only)

/stats → StatsPage (protected)

/requests → ExpertRequestPage (protected)

Use a ProtectedRoute component to check AuthContext for a valid token and role, redirecting to / if invalid.
Outcome: Users see the login page first, and protected routes enforce authentication.
Step 3: Search Page
Task: Build the expert search functionality.

Instructions: 
In pages/SearchPage.tsx, compose ExpertTable and ExpertFilters.

In components/ExpertTable.tsx, create a table showing only available experts (fetched from /api/experts with a filter). Use Shadcn/UI’s Table.

In components/ExpertFilters.tsx, add inputs for role, type, name, and affiliation. Update the API call with query params.

Style with BQA colors (e.g., navy blue headers).
Outcome: Authenticated users can search and filter experts in a table.
Step 4: Expert Request Submission
Task: Allow users to submit expert requests.

Instructions: 
In pages/ExpertRequestPage.tsx, include ExpertRequestForm.

In components/ExpertRequestForm.tsx, build a form with React Hook Form (fields: name, bio, CV upload, etc.). Submit to /api/expert-requests with Axios using FormData for file uploads.
Outcome: Users can submit new requests from a dedicated page.
Step 5: User-Specific Expert Requests
Task: Show users their submitted requests.

Instructions: 
In pages/ExpertRequestPage.tsx, add a table (reuse ExpertRequestTable) to list the user’s requests (fetch from /api/expert-requests?userId={userId}). Display status and rejection reason.

If rejected, provide a button to open ExpertRequestForm for a new submission.
Outcome: Users see their request history and can resubmit if rejected.
Step 6: Admin Panel
Task: Build the admin interface.

Instructions: 
In pages/AdminPage.tsx, create two tabs:
User Management: Use UserTable to list users with edit/delete buttons (calls /api/users).

Expert Requests: Use ExpertRequestTable to list requests with edit (approve/reject) and delete options (calls /api/expert-requests).
Outcome: Admins can manage users and requests efficiently.
Step 7: Stats Page
Task: Visualize statistics.

Instructions: 
In pages/StatsPage.tsx, use StatsCharts to render:
Pie chart for nationality ( /api/statistics/nationality)

Line chart for annual growth ( /api/statistics/growth)

Bar chart for ISCED categories ( /api/statistics/isced)
Use Recharts with interactive tooltips.
Outcome: All users can view interactive stats.
Step 8: PDF Download
Task: Enable PDF downloads for approved experts.

Instructions: 
In ExpertRequestTable (user view) or a details page, add a "Download PDF" button for approved requests, fetching from /api/experts/{id}/approval-pdf.
Outcome: Users can download approval PDFs.
Step 9: Styling and Logos
Task: Apply branding.

Instructions: 
In Header.tsx, add the horizontal logo.

In LoginPage.tsx, use the horizontal logo with descriptor.

In Footer.tsx, include the vertical logo.

Use the icon logo as the favicon.

Apply the color palette via Tailwind classes.
Outcome: A branded, cohesive UI.
Step 10: Testing and Refinement
Task: Ensure everything works.

Instructions: 
Test the flow: login → search → submit request → admin approval → download PDF → view stats.

Verify session management: unauthenticated users can’t access /search, /admin, etc.

Refine based on feedback.
Outcome: A simple, secure, functional app.
Navigation Flow
First Page: / (LoginPage)

After Login:
Users → /search

Admins → /admin
Protected Routes: /search, /requests, /stats, /admin (admin-only)

Session Management: AuthContext ensures no access without a valid token, redirecting to /.
This plan keeps the project simple, avoids dependency overload, and ensures a clear user flow with proper session management. Let me know if you need adjustments!

